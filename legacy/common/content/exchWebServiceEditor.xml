<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: GPL 3.0
 *
 * The contents of this file are subject to the General Public License
 * 3.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * == Exchange 2007/2010 Calendar and Tasks Provider.
 * == For Thunderbird with the Lightning add-on.
 *
 * Author: Michel Verbraak (info@1st-setup.nl)
 * Website: http://www.1st-setup.nl/wordpress/?page_id=133
 * email: exchangecalendar@extensions.1st-setup.nl
 *
 *
 * ***** BEGIN LICENSE BLOCK *****/
-->
<!DOCTYPE dialog
[
  <!ENTITY % dtd1 SYSTEM "chrome://calendar/locale/global.dtd" > %dtd1;
  <!ENTITY % dtd2 SYSTEM "chrome://calendar/locale/calendar.dtd" > %dtd2;
  <!ENTITY % dtd3 SYSTEM "chrome://calendar/locale/calendar-event-dialog.dtd"> %dtd3;
]>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="exchWebServiceEditor">
        <!-- CSS needed to correctly display color buttons (font and background) -->
        <resources>
            <stylesheet src="chrome://messenger/skin/messengercompose/messengercompose.css" />
        </resources>
        <content>
            <xul:vbox flex="1">
                <xul:toolbox anonid="FormatToolbox"
                             mode="icons">
                    <xul:toolbar class="chromeclass-toolbar embedded-toolbar"
                                 anonid="FormatToolbar">
                        <xul:toolbarbutton anonid="cmd_bold"
                                           class="bold-button"
                                           tooltiptext="Bold"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_all" />
                        <xul:toolbarbutton anonid="cmd_italic"
                                           class="italic-button"
                                           tooltiptext="Italic"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_all" />
                        <xul:toolbarbutton anonid="cmd_underline"
                                           class="underline-button"
                                           tooltiptext="Underline"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_all" />
                        <xul:toolbarseparator class="toolbarseparator-standard" />
                        <xul:toolbarbutton anonid="cmd_decreaseFont"
                                           class="decreaseFont-button"
                                           tooltiptext="Indent"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true" />
                        <xul:toolbarbutton anonid="cmd_increaseFont"
                                           class="increaseFont-button"
                                           tooltiptext="Outdent"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true" />
                        <xul:toolbarseparator class="toolbarseparator-standard" />
                        <xul:toolbarbutton anonid="cmd_indent"
                                           class="indent-button"
                                           tooltiptext="Indent"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true" />
                        <xul:toolbarbutton anonid="cmd_outdent"
                                           class="outdent-button"
                                           tooltiptext="Outdent"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true" />
                        <xul:toolbarseparator class="toolbarseparator-standard" />
                        <xul:toolbarbutton anonid="cmd_ol"
                                           class="orderedlist-button"
                                           tooltiptext="Indent"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_all" />
                        <xul:toolbarbutton anonid="cmd_ul"
                                           class="unorderedlist-button"
                                           tooltiptext="Outdent"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_all" />
                        <xul:toolbarseparator class="toolbarseparator-standard" />
                        <xul:toolbaritem class="formatting-button">
                            <xul:stack align="center"
                                       state="rgb(102,102,102)">
                                <xul:box style="background-color:#FFFFFF"
                                         anonid="cmd_backgroundColor"
                                         class="color-button"
                                         tooltiptext="Choose higlight color for text"
                                         id="BackgroundColorButton" />
                                <xul:box style="background-color:rgb(0,0,0)"
                                         anonid="cmd_fontColor"
                                         class="color-button"
                                         tooltiptext="Choose font color for text"
                                         id="TextColorButton" />
                            </xul:stack>
                        </xul:toolbaritem>
                        <xul:toolbarseparator class="toolbarseparator-standard" />
                        <xul:toolbarbutton anonid="cmd_align_left"
                                           class="align-left-button"
                                           tooltiptext="Align left"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_attribute" />
                        <xul:toolbarbutton anonid="cmd_align_center"
                                           class="align-center-button"
                                           tooltiptext="Align center"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_attribute" />
                        <xul:toolbarbutton anonid="cmd_align_right"
                                           class="align-right-button"
                                           tooltiptext="Align right"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_attribute" />
                        <xul:toolbarbutton anonid="cmd_align_justify"
                                           class="align-justify-button"
                                           tooltiptext="Align justify"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="true"
                                           state="state_attribute" />
                        <xul:toolbarbutton anonid="cmd_add_link"
                                           class="addlink-button"
                                           tooltiptext="Add link"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="false"
                                           state="state_attribute" />
                        <xul:toolbarbutton anonid="cmd_edit_link"
                                           class="editlink-button"
                                           tooltiptext="Edit link"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="false"
                                           state="state_attribute"
                                           hidden="true" />
                        <xul:toolbarbutton anonid="cmd_remove_link"
                                           class="removelink-button"
                                           tooltiptext="Remove link"
                                           type="checkbox"
                                           autoCheck="false"
                                           connect="false"
                                           state="state_attribute"
                                           hidden="true" />
                    </xul:toolbar>
                </xul:toolbox>
                <xul:toolbox anonid="FormatToolbox"
                             mode="icons">
                    <xul:toolbar class="chromeclass-toolbar embedded-toolbar"
                                 anonid="FormatToolbar">
                        <xul:toolbaritem class="formatting-button">
                            <xul:menulist anonid="fontFaceMenuList"
                                          class="toolbar-focustarget"
                                          crop="right">
                                <xul:menupopup anonid="fontFaceSelect" />
                            </xul:menulist>
                        </xul:toolbaritem>
                    </xul:toolbar>
                </xul:toolbox>
                <xul:editor type="content"
                            anonid="editor"
                            class="exchWebService-editor"
                            src="about:blank"
                            editortype="htmlmail"
                            flex="1" />
            </xul:vbox>
        </content>
        <implementation>
            <constructor>
<![CDATA[
                        var self=this;

                        // To be able to set correct HTML content
                        this.globalFunctions = Components.classes["@1st-setup.nl/global/functions;1"]
                                .getService(Components.interfaces.mivFunctions);

                        this.editorElement = document.getAnonymousElementByAttribute(this, "anonid", "editor");
                        if (this.editorElement) {
                                this.commandManager = this.editorElement.commandManager;
                                this.editorClickFunction = function(aEvent) { self.onClickEditor(aEvent);};
                                this.editorElement.addEventListener("click", this.editorClickFunction, false);

                                this.editorDblClickFunction = function(aEvent) { self.onDblClickEditor(aEvent);};
                                this.editorElement.addEventListener("dblclick", this.editorDblClickFunction, false);

                                this.editorKeyPressFunction = function(aEvent) { self.onKeyPressEditor(aEvent);};
                                this.editorElement.addEventListener("keyup", this.editorKeyPressFunction, false);

                                this.editorMouseOver = function(aEvent) { self.onMouseOver(aEvent);};
                                this.editorElement.addEventListener("mouseover", this.editorMouseOver , false);

                                this.editorMouseOut = function(aEvent) { self.onMouseOut(aEvent);};
                                this.editorElement.addEventListener("mouseout", this.editorMouseOut, false);

                                // Set default document to empty HTML content
                                this.editorElement.contentDocument.documentElement.innerHTML = this.globalFunctions.fromText2HTML(null);
                        }

                        this.atomService = null;
                        var atomService_class = Components.classes["@mozilla.org/atom-service;1"];
                        if (atomService_class) {
                            this.atomService = atomService_class.getService(Components.interfaces.nsIAtomService);
                        }

                        this.connectAllCommandListenerToolbar("FormatToolbar");

                        // Connect color button
                        this.bgColorFunction = function(){ self.selectColor("cmd_backgroundColor");};
                        var bgColorElement = document.getAnonymousElementByAttribute(this, "anonid", "cmd_backgroundColor")
                        bgColorElement.addEventListener("click", this.bgColorFunction, false);

                        this.fontColorFunction = function(){ self.selectColor("cmd_fontColor");};
                        var fontColorElement = document.getAnonymousElementByAttribute(this, "anonid", "cmd_fontColor")
                        fontColorElement.addEventListener("click", this.fontColorFunction, false);

                        this.highlightColor = "#FFFFFF";
                        this.fontColor = "#000000";

                        // Connect FontFace popup menu
                        this.menuPopupFunction = function(event){ self.selectFont("cmd_fontFace", event.target.value);};
                        this.menuPopup = document.getAnonymousElementByAttribute(this, "anonid", "fontFaceSelect");
                        this.menuPopup.addEventListener("command", this.menuPopupFunction, false);
                        this.fillFontFace();

                        // Connect HyperLink buttons
                        this.addLinkFunction = function(){ self.addLink();};
                        var addLinkElement = document.getAnonymousElementByAttribute(this, "anonid", "cmd_add_link")
                        addLinkElement.addEventListener("click", this.addLinkFunction, false);

                        this.removeLinkFunction = function(){ self.removeLink();};
                        var removeLinkElement = document.getAnonymousElementByAttribute(this, "anonid", "cmd_remove_link")
                        removeLinkElement.addEventListener("click", this.removeLinkFunction, false);

                        this.editLinkFunction = function(){ self.editLink();};
                        var editLinkElement = document.getAnonymousElementByAttribute(this, "anonid", "cmd_edit_link")
                        editLinkElement.addEventListener("click", this.editLinkFunction, false);
                ]]>
            </constructor>
            <destructor>
<![CDATA[
                        if (this.editorElement) {
                                this.editorElement.removeEventListener("click", this.editorClickFunction, false);
                                this.editorElement.removeEventListener("keyup", this.editorKeyPressFunction, false);

                                this.editorElement.removeEventListener("dblclick", this.editorDblClickFunction, false);

                                this.editorElement.removeEventListener("mouseover", this.editorMouseOver , false);
                                this.editorElement.removeEventListener("mouseout", this.editorMouseOut, false);
                        }

                        this.removeAllCommandListenerToolbar("FormatToolbar");

                        // Disconnect color button
                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_backgroundColor")
                                .removeEventListener("click", this.bgColorFunction, false);
                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_fontColor")
                                .removeEventListener("click", this.fontColorFunction, false);

                        // Disconnect Font face button
                        if (this.menuPopupFunction) {
                                this.menuPopup.removeEventListener("command", this.menuPopupFunction, false);
                        }

                        // Disconnect HyperLink buttons
                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_add_link")
                                .removeEventListener("click", this.addLinkFunction, false);
                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_remove_link")
                                .removeEventListener("click", this.removeLinkFunction, false);
                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_edit_link")
                                .removeEventListener("click", this.editLinkFunction, false);
                ]]>
            </destructor>
            <property name="content">
                <getter>
<![CDATA[
                            return this.editorElement.contentDocument.documentElement.innerHTML;
                          ]]>
                </getter>
                <setter>
<![CDATA[
                                if (this.editorElement) {
                                        this.editorElement.contentDocument.documentElement.innerHTML = this.globalFunctions.fromText2HTML(val);
                                }
                          ]]>
                </setter>
            </property>
            <method name="fillFontFace">
                <body>
<![CDATA[
                        if (gExchWebServiceLocalFonts === undefined) {
                                // Build list of all local fonts once per editor
                                try {
                                        var enumerator = Components.classes["@mozilla.org/gfx/fontenumerator;1"]
                                                                 .getService(Components.interfaces.nsIFontEnumerator);
                                        var localFontCount = { value: 0 }
                                        var gExchWebServiceLocalFonts = enumerator.EnumerateAllFonts(localFontCount);
                                }
                                catch(e) { }
                        }

                        if (gExchWebServiceLocalFonts !== undefined) {

                                var itemNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
                                itemNode.setAttribute("label", "Variable width");
                                itemNode.setAttribute("value", "Arial");
                                this.menuPopup.appendChild(itemNode);

                                var itemNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuseparator");
                                this.menuPopup.appendChild(itemNode);

                                for (var i = 0; i < gExchWebServiceLocalFonts.length; ++i) {
                                        if (gExchWebServiceLocalFonts[i] != "") {
                                                var itemNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
                                                itemNode.setAttribute("label", gExchWebServiceLocalFonts[i]);
                                                itemNode.setAttribute("value", gExchWebServiceLocalFonts[i]);
                                                itemNode.setAttribute("style", "font-family: "+gExchWebServiceLocalFonts[i]+" !important;");
                                                this.menuPopup.appendChild(itemNode);
                                        }
                                }
                        }
                ]]>
                </body>
            </method>
            <method name="connectAllCommandListenerToolbar">
                <parameter name="aAnonId" />
                <body>
<![CDATA[
                        var toolbar = document.getAnonymousElementByAttribute(this, "anonid", aAnonId);

                        if (!this.functions) {
                                this.functions = {};
                        }

                        if (toolbar) {
                                var toolbarButtons = toolbar.getElementsByTagName("xul:toolbarbutton");
                                for (var i=0; i<toolbarButtons.length;i++) {
                                        if ((toolbarButtons[i].hasAttribute("connect")) && (toolbarButtons[i].getAttribute("connect") === "true")) {
                                                this.addCommandListener(toolbarButtons[i].getAttribute("anonid"), aAnonId);
                                        }
                                }
                        }
                ]]>
                </body>
            </method>
            <method name="addCommandListener">
                <parameter name="aAnonId" />
                <parameter name="aStore" />
                <body>
<![CDATA[
                        var self = this;

                        if (!this.functions[aStore]) {
                                this.functions[aStore] = {};
                        }
                        this.functions[aStore][aAnonId] = function() { self.toggleButton(aAnonId);};
                        document.getAnonymousElementByAttribute(this, "anonid", aAnonId).addEventListener("command", this.functions[aStore][aAnonId], false);
                ]]>
                </body>
            </method>
            <method name="removeAllCommandListenerToolbar">
                <parameter name="aAnonId" />
                <body>
<![CDATA[
                        if ((this.functions) && (this.functions[aAnonId])) {
                                for (var name in this.functions[aAnonId]) {
                                        this.removeCommandListener(name, aAnonId);
                                }
                        }
                ]]>
                </body>
            </method>
            <method name="removeCommandListener">
                <parameter name="aAnonId" />
                <parameter name="aStore" />
                <body>
<![CDATA[
                        document.getAnonymousElementByAttribute(this, "anonid", aAnonId).removeEventListener("command", this.functions[aStore][aAnonId], false);
                ]]>
                </body>
            </method>
            <method name="selectFont">
                <parameter name="aCmd" />
                <parameter name="aFontName" />
                <body>
<![CDATA[
                        var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
                                        .createInstance(Components.interfaces.nsICommandParams);
                        state.setCStringValue("state_attribute", aFontName);
                        this.commandManager.doCommand(aCmd, state, null);
                        document.getAnonymousElementByAttribute(this, "anonid", "fontFaceMenuList").setAttribute("style", "font-family: "+aFontName+";");
                ]]>
                </body>
            </method>
            <method name="onKeyPressEditor">
                <parameter name="aEvent" />
                <body>
<![CDATA[
                        if ( ( (aEvent.keyCode > 36) && (aEvent.keyCode < 41) ) || (aEvent.keyCode === 33) || (aEvent.keyCode === 34)) {
                                this.onClickEditor(aEvent);
                        }
                ]]>
                </body>
            </method>
            <method name="hrefAndLinkNodeForClickEvent">
                <parameter name="event" />
                <body>
<![CDATA[
                        {
                                var href = "";
                                var isKeyCommand = (event.type === "command");
                                var linkNode = isKeyCommand ? this.editorElement.commandDispatcher.focusedElement
                                                        : event.originalTarget;
                                while (linkNode instanceof Element) {
                                        if (linkNode instanceof HTMLAnchorElement ||
                                          linkNode instanceof HTMLAreaElement ||
                                          linkNode instanceof HTMLLinkElement) {
                                                href = linkNode.href;
                                                if (href)
                                                  break;
                                        }
                                        // Try MathML href
                                        else if (linkNode.namespaceURI == "http://www.w3.org/1998/Math/MathML" &&
                                               linkNode.hasAttribute("href")) {
                                                href = linkNode.getAttribute("href");
                                                href = makeURLAbsolute(linkNode.baseURI, href);
                                                break;
                                        }
                                        // Try simple XLink
                                        else if (linkNode.hasAttributeNS("http://www.w3.org/1999/xlink", "href")) {
                                                href = linkNode.getAttributeNS("http://www.w3.org/1999/xlink", "href");
                                                href = makeURLAbsolute(linkNode.baseURI, href);
                                                break;
                                        }
                                        linkNode = linkNode.parentNode;
                                }
                                return href ? {href: href, linkNode: linkNode} : null;
                        }
                ]]>
                </body>
            </method>
            <method name="onClickEditor">
                <parameter name="aEvent" />
                <body>
<![CDATA[
                        if (aEvent) {
                                this.ceParams = this.hrefAndLinkNodeForClickEvent(aEvent);
                                if (this.ceParams) {
                                        // We have a link active.
                                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_add_link").hidden = true;
                                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_edit_link").hidden = false;
                                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_remove_link").hidden = false;

                                        if (aEvent.ctrlKey) {
                                                // Ctrl key was pressed on click so we are going to open the link and the program which can handle it.
                                                try {
                                                        var extProtService = Components.classes["@mozilla.org/uriloader/external-protocol-service;1"].getService();
                                                        extProtService = extProtService.QueryInterface(Components.interfaces.nsIExternalProtocolService);
                                                        var scheme = this.ceParams.href.substring(0, this.ceParams.href.indexOf(":"));
                                                        if (extProtService.isExposedProtocol(scheme)) {
                                                                var ioService = Components.classes["@mozilla.org/network/io-service;1"]
                                                                          .getService(Components.interfaces.nsIIOService);
                                                                extProtService.loadURI(ioService.newURI(this.ceParams.href, null, null));
                                                        }
                                                } 
                                                catch (ex) {
                                                        alert("Do not know how to handle this reference:"+this.ceParams.href);
                                                }
                                        }
                                }
                                else {
                                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_add_link").hidden = false;
                                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_edit_link").hidden = true;
                                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_remove_link").hidden = true;
                                }
                        }

                        for (var aStore in this.functions) {
                                for (var aAnonId in this.functions[aStore]) {
                                        this.setButtonState(aAnonId);
                                }
                        }

                        var color = this.getCStringCommandState("cmd_fontColor", this.commandManager, this.editorElement.contentWindow, "state_attribute");
                        if (color === "") {
                                color = "transparent";
                        }
                        else {
                                color = this.ConvertRGBColorIntoHEXColor(color);
                        }
                        document.getAnonymousElementByAttribute(this, "anonid", "cmd_fontColor").setAttribute("style","background-color:"+color);

                        var aFirst = { value: false };
                        var aAny = { value: false };
                        var aAll = { value: false };
                        if (this.atomService) {
                            var propAtom = this.atomService.getAtom("font");
                            var edElement = this.editorElement.getHTMLEditor(this.editorElement.contentWindow);
                            color = edElement.getInlinePropertyWithAttrValue(propAtom, "bgcolor", null, aFirst, aAny, aAll);

                            document.getAnonymousElementByAttribute(this, "anonid", "cmd_backgroundColor").setAttribute("style","background-color:"+color);
                        }
                        
                        var font = this.getCStringCommandState("cmd_fontFace", this.commandManager, this.editorElement.contentWindow, "state_attribute");
                        font = font.replace(/"/g, "");
                        var fontElement;
                        if (font.indexOf(",") !== -1) {
                                var fonts = font.split(",");
                                for(var i = 0; ((i<fonts.length) && (!fontElement)); i++) {
                                        fontElement = document.getAnonymousElementByAttribute(this, "label", fonts[i]);
                                        font = fonts[i];
                                }
                        }
                        else {
                                fontElement = document.getAnonymousElementByAttribute(this, "label", font);
                        }
                        if (fontElement) {
                                document.getAnonymousElementByAttribute(this, "anonid", "fontFaceMenuList").selectedItem = fontElement;
                                document.getAnonymousElementByAttribute(this, "anonid", "fontFaceMenuList").setAttribute("style", "font-family: "+font+";");
                        }
                        else {
                        }
                
                ]]>
                </body>
            </method>
            <method name="onDblClickEditor">
                <parameter name="aEvent" />
                <body>
<![CDATA[
                        if (aEvent) {
                                this.ceParams = this.hrefAndLinkNodeForClickEvent(aEvent);
                                if (this.ceParams) {
                                        this.editLink();
                                }
                        }

                ]]>
                </body>
            </method>
            <method name="onMouseOver">
                <parameter name="aEvent" />
                <body>
<![CDATA[
                        if (aEvent) {
                                var ceParams = this.hrefAndLinkNodeForClickEvent(aEvent);
                                if (ceParams) {
                                        this.mouseEnterHRef = ceParams.href;
                                        this.setAttribute("tooltiptext", "ctrl+click to follow link:"+ceParams.href);
                                        aEvent.preventDefault();
                                        return true;
                                }
                        }
                        return true;
                ]]>
                </body>
            </method>
            <method name="onMouseOut">
                <parameter name="aEvent" />
                <body>
<![CDATA[
                        if (aEvent) {
                                var ceParams = this.hrefAndLinkNodeForClickEvent(aEvent);
                                if (ceParams) {
                                        if (ceParams.href != this.mouseEnterHRef) {
                                                return true;
                                        }
                                        this.removeAttribute("tooltiptext");
                                        aEvent.preventDefault();
                                        return true;
                                }
                        }
                        return false;

                ]]>
                </body>
            </method>
            <method name="selectColor">
                <parameter name="aAnonId" />
                <body>
<![CDATA[
                        var element = document.getAnonymousElementByAttribute(this, "anonid", aAnonId);

                        // Get current color
                        var color = this.getCStringCommandState(aAnonId, this.commandManager, this.editorElement.contentWindow, "state_attribute");
                        if (color === "") {
                                color = "transparent";
                        }
                        else {
                                color = this.ConvertRGBColorIntoHEXColor(color);
                        }
                        var colorObj = {};
                        colorObj.Type = "Text";
                        colorObj.TextColor = color;
                        window.openDialog("chrome://editor/content/EdColorPicker.xul", "_blank", "chrome,close,titlebar,modal", "", colorObj);

                        if (colorObj.Cancel) {
                                return;
                        }

                        element.setAttribute("style","background-color:"+colorObj.TextColor);

                        if (aAnonId === "cmd_fontColor") {
                                var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
                                                .createInstance(Components.interfaces.nsICommandParams);
                                state.setCStringValue("state_attribute", colorObj.TextColor);
                                this.commandManager.doCommand(aAnonId, state, null);
                        }
                        else {
                                if (this.atomService) {
                                    var propAtom = this.atomService.getAtom("font");
                                    var edElement = this.editorElement.getHTMLEditor(this.editorElement.contentWindow);
                                    edElement.setInlineProperty(propAtom, "bgcolor", colorObj.TextColor);
                                }
                        }

                ]]>
                </body>
            </method>
            <method name="ConvertRGBColorIntoHEXColor">
                <parameter name="color" />
                <body>
<![CDATA[
                          if ( /rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.test(color) ) {
                            var r = Number(RegExp.$1).toString(16);
                            if (r.length === 1){
                                r = "0"+r;
                            }

                            var g = Number(RegExp.$2).toString(16);
                            if (g.length === 1) {
                                g = "0"+g;
                            }

                            var b = Number(RegExp.$3).toString(16);
                            if (b.length === 1) {
                                b = "0"+b;
                            }

                            return "#"+r+g+b;
                          }
                          else
                          {
                            return color;
                          }
                ]]>
                </body>
            </method>
            <method name="getCStringCommandState">
                <parameter name="aCommandName" />
                <parameter name="aCommandManager" />
                <parameter name="aWindow" />
                <parameter name="aState" />
                <body>
<![CDATA[
                        var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
                                        .createInstance(Components.interfaces.nsICommandParams);
                        aCommandManager.getCommandState(aCommandName, aWindow,state);

                        return state.getCStringValue(aState);
                ]]>
                </body>
            </method>
            <method name="getBoolCommandState">
                <parameter name="aCommandName" />
                <parameter name="aCommandManager" />
                <parameter name="aWindow" />
                <parameter name="aState" />
                <body>
<![CDATA[
                        var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
                                        .createInstance(Components.interfaces.nsICommandParams);
                        aCommandManager.getCommandState(aCommandName, aWindow,state);

                        return state.getBooleanValue(aState);
                ]]>
                </body>
            </method>
            <method name="setButtonState">
                <parameter name="aAnonId" />
                <body>
<![CDATA[
                        if (this.commandManager) {
                                var button = document.getAnonymousElementByAttribute(this, "anonid", aAnonId);
                                if (button.hasAttribute("state")) {
                                        if (aAnonId.indexOf("cmd_align") !== -1) {
                                                button.checked = (aAnonId.indexOf(this.getCStringCommandState("cmd_align", this.commandManager, this.editorElement.contentWindow, "state_attribute")) > 0);
                                        }
                                        else {
                                                button.checked = this.getBoolCommandState(aAnonId, this.commandManager, this.editorElement.contentWindow, button.getAttribute("state"));
                                        }
                                }
                        }
                ]]>
                </body>
            </method>
            <method name="toggleButton">
                <parameter name="aAnonId" />
                <body>
<![CDATA[
                        if (this.commandManager) {
                                if (aAnonId.indexOf("cmd_align") !== -1) {
                                        var state = Components.classes["@mozilla.org/embedcomp/command-params;1"]
                                                        .createInstance(Components.interfaces.nsICommandParams);
                                        state.setCStringValue("state_attribute", aAnonId.substr(10));
                                        this.commandManager.doCommand("cmd_align", state, null);
                                }
                                else {
                                        this.commandManager.doCommand(aAnonId, null, null);
                                }

                                this.onClickEditor();
                        }
                ]]>
                </body>
            </method>
            <method name="addLink">
                <body>
<![CDATA[

                                var result = window.prompt("Link URL:", "http://");
                                if (result) {
                                        var selObj = this.editorElement.contentDocument.getSelection();

                                        var range  = selObj.getRangeAt(0);
                                        var textElement = range.startContainer;
                                        var parent = textElement.parentElement;

                                        var startOffset = range.startOffset;
                                        
                                        var newLink = document.createElement("a");
                                        newLink.setAttribute("href", result);
                                        range.surroundContents(newLink);

                                        var splitText = textElement.splitText(startOffset);
                                        parent.insertBefore(newLink, splitText);
                                        this.content = this.content;
                                }
                ]]>
                </body>
            </method>
            <method name="removeLink">
                <body>
<![CDATA[

                        if (this.ceParams) {
                                var parent = this.ceParams.linkNode.parentElement;
                                while (this.ceParams.linkNode.firstChild) {
                                        parent.insertBefore(this.ceParams.linkNode.firstChild, this.ceParams.linkNode);
                                }
                                parent.removeChild(this.ceParams.linkNode);
                        }
                ]]>
                </body>
            </method>
            <method name="editLink">
                <body>
<![CDATA[

                        if (this.ceParams) {
                                var result = window.prompt("Link URL:", this.ceParams.href);
                                if (result) {
                                        this.ceParams.linkNode.setAttribute("href", result);
                                }
                        }
                ]]>
                </body>
            </method>
        </implementation>
    </binding>
</bindings>
